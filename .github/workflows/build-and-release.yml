name: Build and Release

on:
  workflow_dispatch:
    inputs:
      minecraft_version:
        description: 'Minecraft version to build for'
        required: true
        default: '1.21.5'
        type: choice
        options:
          - '1.21.4'
          - '1.21.5'
      release_type:
        description: 'Type of release'
        required: true
        default: 'prerelease'
        type: choice
        options:
          - 'prerelease'
          - 'release'
          - 'draft'
      create_tag:
        description: 'Create a new tag for this release'
        required: false
        default: false
        type: boolean
  push:
    tags:
      - 'v*'
  schedule:
    # Build and release every Sunday at 10 PM UTC
    - cron: '0 22 * * 0'

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

    - name: Determine version info
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          MINECRAFT_VERSION="${{ github.event.inputs.minecraft_version }}"
        else
          # Extract version from tag or use current gradle.properties
          if [ "${{ github.event_name }}" = "push" ] && [[ "${{ github.ref }}" =~ refs/tags/v(.+) ]]; then
            MINECRAFT_VERSION="${BASH_REMATCH[1]}"
          else
            MINECRAFT_VERSION=$(grep "minecraft_version=" gradle.properties | cut -d'=' -f2)
          fi
        fi
        
        echo "minecraft_version=$MINECRAFT_VERSION" >> $GITHUB_OUTPUT
        echo "build_number=${{ github.run_number }}" >> $GITHUB_OUTPUT
        echo "commit_sha=${{ github.sha }}" >> $GITHUB_OUTPUT
        
        # Create version string
        VERSION_STRING="v$MINECRAFT_VERSION-${{ github.run_number }}"
        echo "version_string=$VERSION_STRING" >> $GITHUB_OUTPUT
        
        echo "Minecraft Version: $MINECRAFT_VERSION"
        echo "Build Number: ${{ github.run_number }}"
        echo "Version String: $VERSION_STRING"

    - name: Update gradle.properties for target version
      if: github.event_name == 'workflow_dispatch'
      run: |
        MINECRAFT_VERSION="${{ steps.version.outputs.minecraft_version }}"
        echo "Updating gradle.properties for Minecraft $MINECRAFT_VERSION"
        
        # Update minecraft_version
        sed -i "s/minecraft_version=.*/minecraft_version=$MINECRAFT_VERSION/" gradle.properties
        
        # Update yarn_mappings based on version
        if [ "$MINECRAFT_VERSION" = "1.21.4" ]; then
          sed -i "s/yarn_mappings=.*/yarn_mappings=1.21.4+build.8/" gradle.properties
        elif [ "$MINECRAFT_VERSION" = "1.21.5" ]; then
          sed -i "s/yarn_mappings=.*/yarn_mappings=1.21.5+build.1/" gradle.properties
        fi
        
        # Update fabric_version based on version
        if [ "$MINECRAFT_VERSION" = "1.21.4" ]; then
          sed -i "s/fabric_version=.*/fabric_version=0.119.4+1.21.4/" gradle.properties
        elif [ "$MINECRAFT_VERSION" = "1.21.5" ]; then
          sed -i "s/fabric_version=.*/fabric_version=0.128.2+1.21.5/" gradle.properties
        fi
        
        # Update meteor_version based on version
        if [ "$MINECRAFT_VERSION" = "1.21.4" ]; then
          sed -i "s/meteor_version=.*/meteor_version=1.21.4-SNAPSHOT/" gradle.properties
        elif [ "$MINECRAFT_VERSION" = "1.21.5" ]; then
          sed -i "s/meteor_version=.*/meteor_version=1.21.5-SNAPSHOT/" gradle.properties
        fi
        
        # Update baritone_version based on version
        if [ "$MINECRAFT_VERSION" = "1.21.4" ]; then
          sed -i "s/baritone_version=.*/baritone_version=1.21.4-SNAPSHOT/" gradle.properties
        elif [ "$MINECRAFT_VERSION" = "1.21.5" ]; then
          sed -i "s/baritone_version=.*/baritone_version=1.21.5-SNAPSHOT/" gradle.properties
        fi
        
        # Update XaeroPlus version based on version
        if [ "$MINECRAFT_VERSION" = "1.21.4" ]; then
          sed -i "s/xaeroplus_version=.*/xaeroplus_version=2.28.1+fabric-1.21.4/" gradle.properties
        elif [ "$MINECRAFT_VERSION" = "1.21.5" ]; then
          sed -i "s/xaeroplus_version=.*/xaeroplus_version=2.28.1+fabric-1.21.5/" gradle.properties
        fi
        
        # Update XaeroWorldmap version based on version
        if [ "$MINECRAFT_VERSION" = "1.21.4" ]; then
          sed -i "s/xaeros_worldmap_version=.*/xaeros_worldmap_version=1.39.12_Fabric_1.21.4/" gradle.properties
        elif [ "$MINECRAFT_VERSION" = "1.21.5" ]; then
          sed -i "s/xaeros_worldmap_version=.*/xaeros_worldmap_version=1.39.12_Fabric_1.21.5/" gradle.properties
        fi
        
        # Update XaeroMinimap version based on version
        if [ "$MINECRAFT_VERSION" = "1.21.4" ]; then
          sed -i "s/xaeros_minimap_version=.*/xaeros_minimap_version=25.2.10_Fabric_1.21.4/" gradle.properties
        elif [ "$MINECRAFT_VERSION" = "1.21.5" ]; then
          sed -i "s/xaeros_minimap_version=.*/xaeros_minimap_version=25.2.10_Fabric_1.21.5/" gradle.properties
        fi

    - name: Build project
      run: |
        echo "Building cozisAddon for Minecraft ${{ steps.version.outputs.minecraft_version }}"
        ./gradlew clean build --no-daemon --stacktrace
        echo "Build completed successfully"

    - name: List build artifacts
      run: |
        echo "Build artifacts:"
        ls -la build/libs/
        echo "JAR files found:"
        find build/libs/ -name "*.jar" -type f

    - name: Create release notes
      id: release_notes
      run: |
        MINECRAFT_VERSION="${{ steps.version.outputs.minecraft_version }}"
        BUILD_NUMBER="${{ steps.version.outputs.build_number }}"
        COMMIT_SHA="${{ steps.version.outputs.commit_sha }}"
        
        cat > release_notes.md << EOF
        ## 🚀 cozisAddon Release - Minecraft $MINECRAFT_VERSION
        
        ### 📦 What's New
        - **Minecraft Version**: $MINECRAFT_VERSION
        - **Build Number**: #$BUILD_NUMBER
        - **Commit**: \`$COMMIT_SHA\`
        - **Build Date**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        
        ### 🔧 Features
        - **PhasePlus Module**: Phase into blocks using ender pearls
        - **ElytraSwap Module**: Automatic elytra swapping with durability monitoring
        - **Movement Utilities**: Enhanced movement capabilities
        - **Hunting Tools**: Advanced hunting and tracking features
        - **Render Enhancements**: Improved visual features
        
        ### 📋 Installation Instructions
        1. Download the appropriate JAR file for your Minecraft version
        2. Place the JAR file in your mods folder
        3. Ensure you have the required dependencies installed
        4. Launch Minecraft and enjoy!
        
        ### 🛠️ Dependencies Required
        - **Fabric Loader**: 0.17.3+
        - **Fabric API**: 0.128.2+$MINECRAFT_VERSION
        - **Meteor Client**: $MINECRAFT_VERSION-SNAPSHOT
        - **Baritone**: $MINECRAFT_VERSION-SNAPSHOT (optional)
        
        ### 📁 Files Included
        - \`cozisaddon-$MINECRAFT_VERSION.jar\` - Main release JAR
        - \`cozisaddon-$MINECRAFT_VERSION-dev.jar\` - Development JAR with debug info
        
        ### 🤖 Automated Build
        This release was created automatically by GitHub Actions.
        
        **Workflow**: [Build and Release](https://github.com/${{ github.repository }}/actions/workflows/build-and-release.yml)
        **Trigger**: ${{ github.event_name }}
        EOF
        
        echo "Release notes created"

    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.version_string }}
        release_name: cozisAddon v${{ steps.version.outputs.minecraft_version }} Build #${{ steps.version.outputs.build_number }}
        body_path: release_notes.md
        draft: ${{ github.event.inputs.release_type == 'draft' || false }}
        prerelease: ${{ github.event.inputs.release_type == 'prerelease' || github.event_name == 'schedule' }}

    - name: Upload Main JAR
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: build/libs/cozisaddon-${{ steps.version.outputs.minecraft_version }}.jar
        asset_name: cozisaddon-${{ steps.version.outputs.minecraft_version }}.jar
        asset_content_type: application/java-archive

    - name: Upload Dev JAR
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: build/libs/cozisaddon-${{ steps.version.outputs.minecraft_version }}-dev.jar
        asset_name: cozisaddon-${{ steps.version.outputs.minecraft_version }}-dev.jar
        asset_content_type: application/java-archive

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: cozisaddon-${{ steps.version.outputs.minecraft_version }}-build-${{ steps.version.outputs.build_number }}
        path: build/libs/
        retention-days: 30

    - name: Create tag (if requested)
      if: github.event.inputs.create_tag == 'true'
      run: |
        git tag -a "${{ steps.version.outputs.version_string }}" -m "Release ${{ steps.version.outputs.version_string }}"
        git push origin "${{ steps.version.outputs.version_string }}"

    - name: Notify success
      run: |
        echo "✅ Successfully built and released cozisAddon for Minecraft ${{ steps.version.outputs.minecraft_version }}"
        echo "📦 Release: ${{ steps.create_release.outputs.html_url }}"
        echo "🏷️ Tag: ${{ steps.version.outputs.version_string }}"
